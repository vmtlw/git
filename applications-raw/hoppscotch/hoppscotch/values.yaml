# Global settings for the application
global:
  externalIP: "0.0.0.0" # Example: "192.168.1.1"
  namespace: "hoppscotch" # Example: "hoppscotch"

# Community-specific settings
community:
  replicas: 1
  image:
    repository: hoppscotch/hoppscotch
    tag: latest
    pullPolicy: IfNotPresent
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi
  migration:
    upgradeEnabled: false # If true, the migration job will run on every helm upgrade

  config:
    database:
      external: false
    postgresql:
      image: postgres:15
      persistence:
        size: 8Gi
        storageClass: ""
      database: hoppscotchCommunity
      username: hoppscotch
      password: hoppscotch123

    mailer:
      enable: false
      useCustomConfigs: false
      addressFrom: '"Dummy Name" <dummy@example.com>'
      smtp:
        url: "smtps://user:pass@smtp.example.com"
        host: "smtp.example.com"
        port: "587"
        secure: false
        user: "user"
        password: "password"
        tlsRejectUnauthorized: false

    rateLimit:
      ttl: 60
      max: 100

    affinityEnabled: false
    nodeHostnames: "node-1,node-2" # Example: "node-3,node-4"

    authjwt:
      sessionSecret: "dummySessionSecret"
      jwtSecret: "dummyJwtSecret"
      tokenSaltComplexity: 10
      magicLinkTokenValidity: 3
      refreshTokenValidity: "1d"
      accessTokenValidity: "1d"
      dataEncryptionKey: "data encryption key with 32 char"

    urls:
      base: "http://test.vmtlw.ru"
      shortcode: "http://test.vmtlw.ru"
      admin: "http://admin.example.com"
      backend:
        gql: "http://backend.example.com/graphql"
        ws: "ws://backend.example.com/graphql"
        api: "http://backend.example.com/v1"
      redirect: "http://test.vmtlw.ru"
      whitelistedOrigins: "http://backend.example.com,http://test.vmtlw.ru,http://admin.example.com"

    auth:
      allowedProviders: "EMAIL" # "GOOGLE,MICROSOFT,GITHUB,EMAIL"

      existingSecret: ""
      google:
        clientId:  "" # "dummyGoogleClientId"
        clientSecret:  "" # "dummyGoogleClientSecret"
        callbackUrl:  "" # "http://backend.example.com/v1/auth/google/callback"
        scope:  "" # "email,profile"

      github:
        clientId:  "" # "dummyGithubClientId"
        clientSecret:  "" # "dummyGithubClientSecret"
        callbackUrl:  "" # "http://backend.example.com/v1/auth/github/callback"
        scope:  "" # "user:email"

      microsoft:
        clientId:  "" # "dummyMicrosoftClientId"
        clientSecret:  "" # "dummyMicrosoftClientSecret"
        callbackUrl:  "" # "http://backend.example.com/v1/auth/microsoft/callback"
        scope:  "" # "user.read"
        tenant:  "" # "dummyTenantId"

    community:
      enableSubpathBasedAccess: false

    links:
      tos: "https://docs.example.com/terms"
      privacyPolicy: "https://docs.example.com/privacy"

# ServiceAccount configuration
serviceAccount:
  name: ""
  annotations: {}

service:
  apiVersion: v1
  name: hoppscotch-community
  app: hoppscotch-community
  # Dynamically set based on ingress
  type: "{{ .Values.service.ingress.enabled | ternary \"ClusterIP\" \"LoadBalancer\" }}"
  # Only set externalTrafficPolicy for LoadBalancer
  externalTrafficPolicy: "{{ .Values.service.ingress.enabled | ternary \"\" \"Cluster\" }}"

  ports:
    backend:
      port: 3170
      targetPort: 3170
      protocol: TCP
      name: backend
    frontend:
      port: 3000
      targetPort: 3000
      protocol: TCP
      name: frontend
    admin:
      port: 3100
      targetPort: 3100
      protocol: TCP
      name: admin
    subpath:
      port: 80
      targetPort: 80
      protocol: TCP
      name: subpath
  selector:
    app: hoppscotch-community

  ingress:
    enabled: true
    mainHost: hoppscotch.vmtlw.ru
    adminHost: admin.hoppscotch.vmtlw.ru
    backendHost: backend.hoppscotch.vmtlw.ru
    className: nginx 

  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    cert-manager.io/cluster-issuer: letsencrypt-prod

  # TLS Configuration
    tls:
      enabled: true
      secretName: hoppscotch-tls
